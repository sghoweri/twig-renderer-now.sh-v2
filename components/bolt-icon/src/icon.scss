@import '@bolt/core';

bolt-icon {
  display: inline-block;
  transform: translate3d(0, 0, 0); // Create a stacking context to scope internal z-index values.
  width: 1em; // Default icon size if size prop not specified
  height: 1em; // Default icon size if size prop not specified
  vertical-align: middle;
  transition: inherit;

  &:not(:resolved){
    height: 0;
    padding-bottom: 100%; // Default square icons
  }
}

:host {
  display: inline-block;
  vertical-align: middle;
}


// By default, icons should inherit the size of the container it's put inside

// Wrapper
.c-bolt-icon {
  position: relative;
}

.c-bolt-icon__icon {
  display: block; // required for vertically aligning icons
  box-sizing: border-box;
  position: relative;
  z-index: bolt-z-index('content');
  width: 1em;
  height: 1em;
  color: var(--bolt-theme-icon);
  pointer-events: none;
}

bolt-icon[size='small'],
.c-bolt-icon--small > .c-bolt-icon__icon {
  width: 16px;
  height: 16px;
}

bolt-icon[size='medium'],
.c-bolt-icon--medium > .c-bolt-icon__icon {
  width: 24px;
  height: 24px;
}

bolt-icon[size='large'],
.c-bolt-icon--large > .c-bolt-icon__icon {
  width: 32px;
  height: 32px;
}


bolt-icon[size='xlarge'],
.c-bolt-icon--xlarge > .c-bolt-icon__icon {
  width: 64px;
  height: 64px;
}

.c-bolt-icon--xlarge > .c-bolt-icon__icon {
  padding: 16px;
}

.c-bolt-icon--small > .c-bolt-icon__icon {
  stroke: currentColor;
  stroke-width: 1px;
}


.c-bolt-icon__background-shape {

  // Fallback if CSS vars are not supported.
  opacity: 0.1;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
  z-index: bolt-z-index('contentBottom');
  width: 100%;
  height: 0;
  padding-bottom: 100%;
  background-color: currentColor;

  @supports(--css: variables) {
    opacity: var(--bolt-theme-icon-background-opacity, 0.1);
    background-color: var(--bolt-theme-icon-background, var(--bolt-theme-primary-text-default, currentColor));
  }
}

.c-bolt-icon__background-shape--circle {
  border-radius: 50%;
}

.c-bolt-icon__background-shape--square {
  border-radius: $bolt-border-radius;
}




// Color options
.c-bolt-icon--teal {
  $brand-color: bolt-color(teal);
  $contrast-color: bolt-text-contrast($brand-color);

  // Fallbacks if CSS vars are not supported.
  color: $contrast-color;

  .c-bolt-icon__background-shape {
    opacity: bolt-opacity(100);
    background-color: $brand-color;
  }

  @include bolt-css-vars((
    --bolt-theme-icon: $contrast-color,
    --bolt-theme-icon-background: $brand-color,
    --bolt-theme-icon-background-opacity: bolt-opacity(100),
  ));

  // Properties must be re-declared here so that CSS variable values will take precedence over hard-coded values for
  // fallback browsers.  Remove this when support for browsers that don't support CSS vars is dropped.
  @supports(--css: variables) {
    color: var(--bolt-theme-icon);

    .c-bolt-icon__background-shape {
      opacity: var(--bolt-theme-icon-background-opacity);
      background-color: var(--bolt-theme-icon-background);
    }
  }
}

.c-bolt-icon--blue {
  $brand-color: bolt-color(blue);
  $contrast-color: bolt-text-contrast($brand-color);

  // Fallbacks if CSS vars are not supported.
  color: $brand-color;

  .c-bolt-icon__background-shape {
    opacity: bolt-opacity(100);
    background-color: $contrast-color;
  }

  @include bolt-css-vars((
    --bolt-theme-icon: $brand-color,
    --bolt-theme-icon-background: $contrast-color,
    --bolt-theme-icon-background-opacity: bolt-opacity(100),
  ));

  // Properties must be re-declared here so that CSS variable values will take precedence over hard-coded values for
  // fallback browsers.  Remove this when support for browsers that don't support CSS vars is dropped.
  @supports(--css: variables) {
    color: var(--bolt-theme-icon);

    .c-bolt-icon__background-shape {
      opacity: var(--bolt-theme-icon-background-opacity);
      background-color: var(--bolt-theme-icon-background);
    }
  }
}

.c-bolt-icon__background {
  fill: currentColor;
  fill: var(--bolt-theme-text, currentColor)
}

